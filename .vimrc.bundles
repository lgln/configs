" Bundles {
    set nocompatible              " be iMproved, required
    filetype off                  " required

    set rtp+=~/.vim/bundle/Vundle.vim/
    call vundle#rc()
    " let Vundle manage Vundle, required
    Bundle 'gmarik/Vundle.vim'

    " Óï·¨¼ì²é {
    Bundle 'scrooloose/syntastic'
    " }

    " solarized { 
    Bundle 'altercation/vim-colors-solarized'
    set background=dark
    colorscheme solarized
    let g:solarized_italic=0
    " }

    " youcompleteme {
    Bundle 'Valloric/YouCompleteMe'
    let g:ycm_goto_buffer_command = 'horizontal-split'
    " nnoremap <leader>jd :YcmCompleter GoToDefinition<CR>
    nnoremap <leader>jd :YcmCompleter GoToDefinitionElseDeclaration<CR>
    nnoremap <leader>gd :YcmCompleter GoToDeclaration<CR>
    if !empty(glob("~/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp/ycm/.ycm_extra_conf.py"))
        let g:ycm_global_ycm_extra_conf = "~/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp/ycm/.ycm_extra_conf.py"
    endif
    " }
    
    " easymotion {
    Bundle 'Lokaltog/vim-easymotion'
    let g:EasyMotion_smartcase = 1
    " let g:EasyMotion_startofline = 0 " keep cursor colum when JK motion
    map <Leader><leader>h <Plug>(easymotion-linebackward)
    map <Leader><Leader>j <Plug>(easymotion-j)
    map <Leader><Leader>k <Plug>(easymotion-k)
    map <Leader><leader>l <Plug>(easymotion-lineforward)
    map  <leader>/ <Plug>(easymotion-sn)
    omap <leader>/ <Plug>(easymotion-tn)
    " }

    " ctrlp {
    Bundle 'ctrlpvim/ctrlp.vim'
    let g:ctrlp_cmd = 'CtrlP'
    map <leader>f :CtrlPMRU<CR>
    "set wildignore+=*/tmp/*,*.so,*.swp,*.zip     " MacOSX/Linux"
    let g:ctrlp_custom_ignore = {
        \ 'dir':  '\v[\/]\.(git|hg|svn|rvm)$',
        \ 'file': '\v\.(exe|so|dll|zip|tar|tar.gz)$',
        \ }
    "\ 'link': 'SOME_BAD_SYMBOLIC_LINKS',
    let g:ctrlp_working_path_mode=0
    let g:ctrlp_match_window_bottom=1
    let g:ctrlp_max_height=15
    let g:ctrlp_match_window_reversed=0
    let g:ctrlp_mruf_max=500
    let g:ctrlp_follow_symlinks=1
    "let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'
    let g:ctrlp_user_command = 'dir %s /-n /b /s /a-d'
    " }

    " ctrlp-funky {
    Bundle 'tacahiroy/ctrlp-funky'
    nnoremap <Leader>fu :CtrlPFunky<Cr>
    " narrow the list down with a word under cursor
    nnoremap <Leader>fU :execute 'CtrlPFunky ' . expand('<cword>')<Cr>
    let g:ctrlp_funky_syntax_highlight = 1
    let g:ctrlp_extensions = ['funky']
    " }
    
    " ctrlspace {
    Bundle 'szw/vim-ctrlspace'
    set hidden
    let g:airline_exclude_preview=1
    let g:ctrlspace_default_mapping_key="<leader><space>"
    " }
    
    " riv {
    Bundle 'Rykka/riv.vim'
    " }
    
    " ag.vim {
    Bundle 'rking/ag.vim'
    nnoremap <leader>a :Ag <C-R><C-W>
    " }
    
    " tagbar {
    Bundle 'majutsushi/tagbar'
    let g:tagbar_autofocus = 1
    nnoremap <silent> <leader>tt :TagbarToggle<CR>
    " }



    filetype plugin indent on    " required
" }
