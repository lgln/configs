" Bundles {
    set nocompatible              " be iMproved, required
    filetype off                  " required

    set rtp+=~/.vim/bundle/Vundle.vim/
    call vundle#rc()
    " let Vundle manage Vundle, required
    Bundle 'gmarik/Vundle.vim'

    " syntax {
    Bundle 'scrooloose/syntastic'
    " }

    " solarized { 
    Bundle 'altercation/vim-colors-solarized'
    set background=dark
    colorscheme solarized
    let g:solarized_italic=0
    " }

"    " youcompleteme {
"    Bundle 'Valloric/YouCompleteMe'
"    let g:ycm_goto_buffer_command = 'horizontal-split'
"    " nnoremap <leader>jd :YcmCompleter GoToDefinition<CR>
"    nnoremap <leader>jd :YcmCompleter GoToDefinitionElseDeclaration<CR>
"    nnoremap <leader>gd :YcmCompleter GoToDeclaration<CR>
"    if !empty(glob("~/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp/ycm/.ycm_extra_conf.py"))
"        let g:ycm_global_ycm_extra_conf = "~/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp/ycm/.ycm_extra_conf.py"
"    endif
"    " }
    
    " easymotion {
    Bundle 'Lokaltog/vim-easymotion'
    let g:EasyMotion_smartcase = 1
    " let g:EasyMotion_startofline = 0 " keep cursor colum when JK motion
    map <Leader><leader>h <Plug>(easymotion-linebackward)
    map <Leader><Leader>j <Plug>(easymotion-j)
    map <Leader><Leader>k <Plug>(easymotion-k)
    map <Leader><leader>l <Plug>(easymotion-lineforward)
    map  <leader>/ <Plug>(easymotion-sn)
    omap <leader>/ <Plug>(easymotion-tn)
    " }

    " ctrlp {
    Bundle 'ctrlpvim/ctrlp.vim'
    let g:ctrlp_cmd = 'CtrlP'
    map <leader>f :CtrlPMRU<CR>
    "set wildignore+=*/tmp/*,*.so,*.swp,*.zip     " MacOSX/Linux"
    let g:ctrlp_custom_ignore = {
        \ 'dir':  '\v[\/]\.(git|hg|svn|rvm)$',
        \ 'file': '\v\.(exe|so|dll|zip|tar|tar.gz)$',
        \ }
    "\ 'link': 'SOME_BAD_SYMBOLIC_LINKS',
    let g:ctrlp_working_path_mode=0
    let g:ctrlp_match_window_bottom=1
    let g:ctrlp_max_height=15
    let g:ctrlp_match_window_reversed=0
    let g:ctrlp_mruf_max=500
    let g:ctrlp_follow_symlinks=1
    if executable('ag')
        let g:ctrlp_user_command = 'ag -l --nocolor -g "" %s'
    else
        let g:ctrlp_user_command = 'dir %s /-n /b /s /a-d'
    endif
    " }

    " ctrlp-funky {
    Bundle 'tacahiroy/ctrlp-funky'
    nnoremap <Leader>fu :CtrlPFunky<Cr>
    " narrow the list down with a word under cursor
    nnoremap <Leader>fU :execute 'CtrlPFunky ' . expand('<cword>')<Cr>
    let g:ctrlp_funky_syntax_highlight = 1
    let g:ctrlp_extensions = ['funky']
    " }
    
    " ctrlspace {
    Bundle 'szw/vim-ctrlspace'
    set hidden
    let g:airline_exclude_preview=1
    let g:ctrlspace_default_mapping_key="<leader><space>"
    " }
    
    " riv {
    Bundle 'Rykka/riv.vim'
    " }
    
    " ag.vim {
    Bundle 'rking/ag.vim'
    "let g:agprg="ag --column"
    nnoremap \ :Ag<SPACE>
    
    if executable('ag')
        nnoremap K :silent! Ag! "\b<C-R><C-W>\b"<CR>:cw<CR>
    else
        nnoremap K :silent! grep! "<C-R><C-W>" *<CR>:cw<CR>
    endif
    " }
    
    " tagbar {
    Bundle 'majutsushi/tagbar'
    let g:tagbar_autofocus = 1
    nnoremap <silent> <leader>tt :TagbarToggle<CR>
    " }

    " nerdtree {
    Bundle 'scrooloose/nerdtree'
    nnoremap <leader>e :NERDTree<CR>
    let g:NERDTreeMapOpenSplit = 's'
    let g:NERDTreeMapOpenVSplit = 'v'
    " }

    " multiple-cursors {
    Bundle 'http://github.com/terryma/vim-multiple-cursors.git'
    " }
    
    
    " neocomplete {
    Bundle 'http://github.com/Shougo/neocomplete.vim'
    "Note: This option must set it in .vimrc(_vimrc).  NOT IN .gvimrc(_gvimrc)!
    " Disable AutoComplPop.
    let g:acp_enableAtStartup = 0
    " Use neocomplete.
    let g:neocomplete#enable_at_startup = 1
    " Use smartcase.
    let g:neocomplete#enable_smart_case = 1
    " Set minimum syntax keyword length.
    let g:neocomplete#sources#syntax#min_keyword_length = 3
    let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'

    " Define dictionary.
    let g:neocomplete#sources#dictionary#dictionaries = {
        \ 'default' : '',
        \ 'vimshell' : $HOME.'/.vimshell_hist',
        \ 'scheme' : $HOME.'/.gosh_completions'
            \ }

    " Define keyword.
    if !exists('g:neocomplete#keyword_patterns')
        let g:neocomplete#keyword_patterns = {}
    endif
    let g:neocomplete#keyword_patterns['default'] = '\h\w*'

    " Plugin key-mappings.
    inoremap <expr><C-g>     neocomplete#undo_completion()
    inoremap <expr><C-l>     neocomplete#complete_common_string()

    " Recommended key-mappings.
    " <CR>: close popup and save indent.
    inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
    function! s:my_cr_function()
      return (pumvisible() ? "\<C-y>" : "" ) . "\<CR>"
      " For no inserting <CR> key.
      "return pumvisible() ? "\<C-y>" : "\<CR>"
    endfunction
    " <TAB>: completion.
    inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
    " <C-h>, <BS>: close popup and delete backword char.
    inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
    inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
    " Close popup by <Space>.
    "inoremap <expr><Space> pumvisible() ? "\<C-y>" : "\<Space>"

    " AutoComplPop like behavior.
    "let g:neocomplete#enable_auto_select = 1

    " Shell like behavior(not recommended).
    "set completeopt+=longest
    "let g:neocomplete#enable_auto_select = 1
    "let g:neocomplete#disable_auto_complete = 1
    "inoremap <expr><TAB>  pumvisible() ? "\<Down>" : "\<C-x>\<C-u>"

    " Enable omni completion.
    autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
    autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
    autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
    autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
    autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

    " Enable heavy omni completion.
    if !exists('g:neocomplete#sources#omni#input_patterns')
      let g:neocomplete#sources#omni#input_patterns = {}
    endif
    "let g:neocomplete#sources#omni#input_patterns.php = '[^. \t]->\h\w*\|\h\w*::'
    "let g:neocomplete#sources#omni#input_patterns.c = '[^.[:digit:] *\t]\%(\.\|->\)'
    "let g:neocomplete#sources#omni#input_patterns.cpp = '[^.[:digit:] *\t]\%(\.\|->\)\|\h\w*::'

    " For perlomni.vim setting.
    " https://github.com/c9s/perlomni.vim
    let g:neocomplete#sources#omni#input_patterns.perl = '\h\w*->\h\w*\|\h\w*::'

    " supertab {
    Bundle 'https://github.com/ervandew/supertab'
    let g:SuperTabDefaultCompletionType = "<c-n>"
    " }



    filetype plugin indent on    " required
" }
